// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package assets generated by go-bindata.// sources:
// resources/lorem.txt
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _resourcesLoremTxt = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x5d\x6e\x23\xbf\x0d\xbf\x0a\x0f\x30\xf0\x1d\x8a\xfc\x5b\xa0\x40\x77\xd1\x62\xb1\xfb\x4e\x4b\x8c\xcd\x42\x1f\x13\x89\x74\xb1\xb7\x2f\x48\x49\x33\x93\xa0\x7d\x6c\x9f\x12\x7b\x34\x12\xc5\xdf\x17\xfd\xb7\xda\x28\x03\xef\x5d\x33\xc4\x9a\x6a\x83\xce\x02\x98\x49\x36\x08\xb5\x74\x0a\x42\xa2\xd4\x00\x23\xef\xdc\x03\x97\x07\x50\x62\xb9\xc1\x37\xa4\x40\x05\x3b\xec\xb5\x89\xb0\xd4\x66\x2f\x3c\x94\x20\x63\xef\x78\x83\xbf\x68\x0f\x04\x7b\xed\x4a\x8d\x36\xc8\xf8\x28\x08\x9d\x22\xec\x9a\x5e\x5c\xb0\x81\x26\x69\x1c\x98\xfa\x06\xbb\x36\xed\x90\x28\x88\x76\xc8\x98\xa8\x2b\x46\x84\xc4\x77\x6a\x75\x3b\x8a\x82\x50\x73\xae\xb1\xce\xdd\xa8\xd5\x0e\x1f\xca\x1d\xb4\x15\xbc\xc1\x77\x2d\x01\x5e\xfc\xa2\xd6\x10\x38\xef\xd4\x22\x93\x00\x15\xce\xab\x1e\xea\x72\x83\x5f\xfc\xc2\xac\x1d\x10\x84\x52\xd2\x7e\x83\xbf\x53\x4a\x54\x84\xfa\x87\x12\x3c\xf1\xce\x82\x45\x20\xd7\x76\x67\x90\xc6\x5d\xd8\x1e\x74\x2a\xa3\x42\x12\x28\x34\xff\x39\xab\x7d\xc7\x4c\x1d\x30\x80\x68\xdb\xb9\x03\x3d\xa8\x0b\xda\xee\xad\x72\x81\xfd\x89\x8d\xa4\x21\x94\x5a\x34\xe7\xdf\xb0\x53\x24\x6b\xa4\x36\xf6\x9d\x6a\x0b\x7c\x83\x3f\x51\x21\x2c\x50\x28\x40\x32\x74\x6e\xf0\xd7\x72\x36\xf9\x06\x7f\x54\x7f\x84\xb5\x91\x95\x31\xf7\x42\x7d\x28\xdd\xe0\x87\xf6\x9d\x4a\xe4\xde\x09\xa2\xf2\xe8\xeb\x06\x3d\x50\xa2\xc6\x7e\x3b\x94\x0d\x5e\x9a\x76\x15\x14\x82\x17\x0b\xd2\x06\x7b\x23\x61\xcd\x90\x51\x84\xfb\x06\x45\x4b\x38\x4b\x7b\xf8\x7d\xc7\xcb\xd0\x29\xc3\x8b\x0a\x15\x14\x7b\x96\x88\xdf\xa9\xc4\x1b\xfc\x3c\x8a\x59\xbd\xc6\x64\x5d\x13\xbf\xa7\x3d\x9b\x17\xfe\x54\x23\xee\x7c\x37\xe4\x9d\x87\xfb\x15\x05\x87\xd8\x2e\x2f\xf4\xa0\x06\x45\x53\xc2\x75\xfb\x7b\xc2\x12\x59\xe0\x9d\xf4\xc1\x28\x90\xf8\xa1\xe7\xd3\x27\x95\xd8\xa8\xb1\x6c\xf0\x4e\x69\xf4\xf6\xc2\x06\xe5\x9e\x6b\x5c\x9c\x1b\xdc\x3f\xee\x6f\xa8\x6e\xc0\x05\x12\x06\x2e\x8c\xe3\x5c\x28\xdc\xd3\xe8\x43\xc7\x9d\xa9\xac\xa3\x54\x8c\x51\xbe\x7e\x30\xc3\x45\xf3\xa1\x28\xe7\x7f\x37\xf8\xb3\x30\xe6\xf1\x7a\x54\x83\xd8\x1a\x63\xdf\x34\x14\x78\xd5\xa4\xb2\xdb\xb2\x1f\x14\xad\xc1\xa3\x17\x5c\x1c\x04\x47\x1e\x4f\x0e\x2e\x32\xd9\xe1\x13\xf3\x7f\xe8\x04\x76\xee\x2a\x94\xf7\xda\x56\xff\xfe\xb7\xcc\x76\xc5\x61\x58\x87\x1d\xa6\x50\x23\xd7\x61\x28\x9f\xc8\x46\x69\x03\xd4\x60\x66\x81\x61\x03\x0c\x41\x73\xc7\x02\x1c\x27\x54\x5f\xea\x0d\xda\xba\x76\xe8\xf8\x60\xe3\xe5\x7f\x5c\x73\x48\x63\xb3\xfd\x59\x0e\xe4\x66\x91\xf3\xc0\x0d\xa2\x83\x60\x96\x61\x1d\x32\xf9\xb7\xa0\x9b\x77\xf2\x2c\xd1\x7b\x3a\xed\xe5\x45\x09\x1a\x77\xf3\x87\xb7\x86\xdd\x29\x7c\x3e\xc1\x62\xcb\x4f\x5b\x6c\xcf\x5a\x82\xad\x3d\xdd\x25\xf3\x0d\xbe\x79\xa7\x5d\x3d\xff\x15\xf8\xc5\xf1\x61\x88\x64\x72\xb8\xd7\xe6\xf2\x6a\xf5\xff\xe4\x4e\x9d\x4c\x21\xdb\xb8\x96\xbb\x02\xf4\x9a\x12\x07\x16\x8d\xe6\x5e\x87\x91\xfb\xd6\x7e\x0d\xc6\xa0\xa6\xaf\xc2\xf7\xe7\xb6\x5e\xba\x58\x8d\x13\xd8\xe3\x60\x90\x7f\xea\x9f\xe2\x44\xca\x5c\xdb\xc4\x26\xd4\xa2\xe6\x41\x8f\x23\x14\xc6\xc7\x77\xd4\xe0\x0e\x61\xb6\x65\x87\x2e\xe5\xf9\x06\xd4\xbf\xe6\x94\x9d\xb3\x5d\x54\x68\xe9\xb0\x2d\xc0\xc7\x87\x7f\x71\x67\x37\xd5\x29\xb1\x1b\xbc\x25\xec\x1d\x70\x17\x2a\x02\x82\x81\x85\xa1\xd7\xc0\xb5\x7f\x28\x60\x84\x64\xf4\x42\x90\xda\x3e\xd4\x96\xec\xe4\x61\xa7\x77\xf3\x87\xda\xa5\xe1\xe6\xdf\x71\x09\xb4\x4b\xed\xf0\xfc\x9d\xa9\x20\x19\x76\xd3\x27\x52\xc2\x1c\x6a\xb3\x55\xef\x8d\xcb\x83\xcd\x55\x06\xba\xc3\x2c\x0d\x02\xb7\x16\x20\x9d\xd6\xb4\xcc\x71\x86\xde\x0d\xde\x34\x7b\x5d\xd6\x72\x94\xea\xec\x77\x1f\xbe\x2f\xb0\x1f\x85\x3b\x44\xee\xb0\x63\x13\x6d\x4c\xce\x13\xa3\xce\x06\x05\x7b\x20\xd1\x06\x8d\x23\x07\x4d\x96\xb4\x07\xb7\x8f\x3e\x87\x5a\x22\x67\x2a\xa2\xd9\x55\x3c\x6d\x29\x1c\x1e\xbb\x38\x8c\x32\xeb\x1f\xee\x76\xb8\xb0\x15\x32\x62\xf5\xd3\xad\x17\xb7\xbd\xf3\xef\xd4\xc6\x11\xdb\x74\x3b\x93\xd6\x14\xfb\x45\xcf\xae\x58\x23\xc9\xe9\x14\x09\x83\x07\x1a\xc5\x93\x37\x06\xa8\x73\xd0\xb5\x6c\x56\xed\x69\x24\x5c\x02\x47\x2d\xa7\xd2\xe6\x98\xb0\x62\x6d\x46\xd7\xb4\x78\x67\x68\xf6\x47\xe3\xce\xb3\x9e\xc1\xf4\xb8\xbc\xe7\x4d\x9b\x09\x50\xdb\x52\xc4\x58\x60\x8e\x60\x25\xcc\x76\x2e\xe8\xd6\xdf\x51\xd4\x2f\xea\x86\x55\xd2\x3c\xa6\x96\x31\x71\xe1\x4c\xa9\x39\x3e\xbd\xe8\x69\xe8\x5c\xdd\xd4\x03\x74\x46\xf9\xa9\x77\x73\xd0\x49\xec\xc1\xfa\x65\x78\x83\xe6\xeb\x2a\x67\xc1\xd6\xe4\x01\xd9\x77\x47\xe6\x0c\x4a\xb8\xf3\x9d\x8a\xf5\xf2\x9f\xda\xa5\x1e\x9c\x1c\xfa\xde\x3c\xe3\xbc\xe2\xe5\xad\x33\x2f\xb7\x51\xda\xb0\x84\x5c\x93\xdd\x8f\x16\x46\x28\xf0\x68\xf8\xe2\x88\x03\xa1\x61\x98\x32\x87\xba\x33\xb7\x6a\x2b\xd8\x08\xf6\x84\xc1\x7d\x71\x5a\xee\x4f\x39\x77\x1c\xae\x8b\xe2\x8e\xba\xdc\x72\x8d\x17\xf9\x18\xa0\x06\x00\xf6\xa2\x8f\x31\x8b\x90\x0b\xa8\xd7\x98\x5c\x3d\xb3\x56\xa4\x5c\xfb\xf3\xc2\xc6\xda\x2f\xfa\x1c\xa8\xfd\x61\x17\x3f\x06\x04\x5e\x03\x84\x9b\xf8\x05\x24\x8e\x2b\x90\xbf\x1b\x1f\x56\xa2\xcc\xf7\x71\xd0\xc4\x20\x18\x93\xd4\x61\xf1\x87\x43\x9b\x13\x23\x75\x93\xec\x3c\x62\xb9\xc7\x20\xa8\xef\xbe\x5d\x66\xaf\x8b\xd5\x6e\x07\xd3\xf0\xea\x7e\x66\x9a\x89\xea\x97\x04\x19\x00\xcc\x89\xe5\x2b\xa3\x3e\xb9\xe9\xf9\x63\xe0\x9c\x9f\x54\xb6\xc5\x12\x77\x86\x69\x07\x9e\xf8\x23\x02\xa4\x36\x9f\x54\x47\xb0\x9c\x24\xbb\xc4\xae\xbb\xc0\x13\xc3\x4c\x33\x1b\x05\xf7\x84\x42\x08\x91\x83\x68\xb6\x29\xfd\x3a\x27\xee\xd5\xbc\x99\xcf\x70\x1d\x27\x8d\x6c\xb9\xfe\x36\xe9\x67\xfe\xf7\x1a\xad\xb5\xab\x89\x93\xa4\xf6\xc6\x66\xcc\x32\xc9\x79\xc4\xcc\xb2\x16\xff\xac\xc3\x87\x4c\x2f\x6e\xb8\x1d\x0e\xe8\x04\x72\x92\xaf\x79\x71\x31\x6c\xe8\xf0\x18\x40\x74\x5b\x9c\x1a\x92\x5c\xcc\x5f\x16\x7a\x0c\xef\xe7\x05\x06\x85\xfe\x1d\x00\x00\xff\xff\x3f\xa1\x65\x86\x97\x0d\x00\x00")

func resourcesLoremTxtBytes() ([]byte, error) {
	return bindataRead(
		_resourcesLoremTxt,
		"resources/lorem.txt",
	)
}

func resourcesLoremTxt() (*asset, error) {
	bytes, err := resourcesLoremTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "resources/lorem.txt", size: 3479, mode: os.FileMode(420), modTime: time.Unix(1607540002, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"resources/lorem.txt": resourcesLoremTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"resources": &bintree{nil, map[string]*bintree{
		"lorem.txt": &bintree{resourcesLoremTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
